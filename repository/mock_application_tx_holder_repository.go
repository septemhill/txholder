// Code generated by mockery v2.10.1. DO NOT EDIT.

package repository

import (
	context "context"
	model "txholder/model"

	mock "github.com/stretchr/testify/mock"
)

// MockApplicationTxHolderRepository is an autogenerated mock type for the ApplicationTxHolderRepository type
type MockApplicationTxHolderRepository struct {
	mock.Mock
}

// Commit provides a mock function with given fields:
func (_m *MockApplicationTxHolderRepository) Commit() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateApplication provides a mock function with given fields: ctx, application
func (_m *MockApplicationTxHolderRepository) CreateApplication(ctx context.Context, application *model.Application) error {
	ret := _m.Called(ctx, application)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Application) error); ok {
		r0 = rf(ctx, application)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteApplication provides a mock function with given fields: ctx, appId
func (_m *MockApplicationTxHolderRepository) DeleteApplication(ctx context.Context, appId string) error {
	ret := _m.Called(ctx, appId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, appId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetApplication provides a mock function with given fields: ctx
func (_m *MockApplicationTxHolderRepository) GetApplication(ctx context.Context) (*model.Application, error) {
	ret := _m.Called(ctx)

	var r0 *model.Application
	if rf, ok := ret.Get(0).(func(context.Context) *model.Application); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Application)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApplications provides a mock function with given fields: ctx
func (_m *MockApplicationTxHolderRepository) ListApplications(ctx context.Context) ([]*model.Application, error) {
	ret := _m.Called(ctx)

	var r0 []*model.Application
	if rf, ok := ret.Get(0).(func(context.Context) []*model.Application); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Application)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewApplicationTxHolderRepository provides a mock function with given fields:
func (_m *MockApplicationTxHolderRepository) NewApplicationTxHolderRepository() ApplicationTxHolderRepository {
	ret := _m.Called()

	var r0 ApplicationTxHolderRepository
	if rf, ok := ret.Get(0).(func() ApplicationTxHolderRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ApplicationTxHolderRepository)
		}
	}

	return r0
}

// NewUserTxHolderRepository provides a mock function with given fields:
func (_m *MockApplicationTxHolderRepository) NewUserTxHolderRepository() UserTxHolderRepository {
	ret := _m.Called()

	var r0 UserTxHolderRepository
	if rf, ok := ret.Get(0).(func() UserTxHolderRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(UserTxHolderRepository)
		}
	}

	return r0
}

// Rollback provides a mock function with given fields:
func (_m *MockApplicationTxHolderRepository) Rollback() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
