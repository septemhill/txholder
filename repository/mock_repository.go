// Code generated by mockery v2.10.1. DO NOT EDIT.

package repository

import mock "github.com/stretchr/testify/mock"

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// NewApplicationRepository provides a mock function with given fields:
func (_m *MockRepository) NewApplicationRepository() ApplicationRepository {
	ret := _m.Called()

	var r0 ApplicationRepository
	if rf, ok := ret.Get(0).(func() ApplicationRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ApplicationRepository)
		}
	}

	return r0
}

// NewApplicationTxHolderRepository provides a mock function with given fields:
func (_m *MockRepository) NewApplicationTxHolderRepository() ApplicationTxHolderRepository {
	ret := _m.Called()

	var r0 ApplicationTxHolderRepository
	if rf, ok := ret.Get(0).(func() ApplicationTxHolderRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ApplicationTxHolderRepository)
		}
	}

	return r0
}

// NewUserRepository provides a mock function with given fields:
func (_m *MockRepository) NewUserRepository() UserRepository {
	ret := _m.Called()

	var r0 UserRepository
	if rf, ok := ret.Get(0).(func() UserRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(UserRepository)
		}
	}

	return r0
}

// NewUserTxHolderRepository provides a mock function with given fields:
func (_m *MockRepository) NewUserTxHolderRepository() UserTxHolderRepository {
	ret := _m.Called()

	var r0 UserTxHolderRepository
	if rf, ok := ret.Get(0).(func() UserTxHolderRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(UserTxHolderRepository)
		}
	}

	return r0
}
